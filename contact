<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Contact Us - Casa de Amor</title>
    
    <!-- EmailJS SDK -->
    <script src="https://cdn.jsdelivr.net/npm/@emailjs/browser@3/dist/email.min.js"></script>
    
    <!-- External Stylesheet -->
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <!-- Skip Link for Screen Readers -->
    <a href="#main-content" class="skip-link">Skip to main content</a>

    <!-- Live Region for Form Status Announcements -->
    <div id="form-status" class="sr-only" aria-live="polite" aria-atomic="true"></div>

    <!-- Success Popup -->
    <div class="popup-overlay" id="popup-overlay" aria-hidden="true"></div>
    <div class="success-popup" id="success-popup" role="dialog" aria-modal="true" aria-labelledby="popup-title" aria-describedby="popup-message" aria-hidden="true">
        <h3 id="popup-title">âœ… Success!</h3>
        <p id="popup-message">Your submission has been received.</p>
        <button class="submit-btn popup-close-btn" id="popup-close" aria-label="Close success message">Close</button>
    </div>

    <div class="container">
        <header class="header" role="banner">
            <h1>Contact Us</h1>
            <p>We're here to help with your issues and enquiries</p>
        </header>

        <nav class="form-tabs" role="tablist" aria-label="Contact form options">
            <button class="tab-button active" 
                    data-tab="issue"
                    role="tab" 
                    aria-selected="true" 
                    aria-controls="issue-form" 
                    id="issue-tab"
                    aria-label="Report an issue form">
                Report Issue
            </button>
            <button class="tab-button" 
                    data-tab="enquiry"
                    role="tab" 
                    aria-selected="false" 
                    aria-controls="enquiry-form" 
                    id="enquiry-tab"
                    aria-label="Make an enquiry form">
                Make Enquiry
            </button>
        </nav>

        <main id="main-content" role="main">
            <!-- Issue Form -->
            <section id="issue-form" class="form-section active" role="tabpanel" aria-labelledby="issue-tab" aria-hidden="false">
                <div class="form-container">
                    <form id="issue-form-element" novalidate aria-label="Issue report form">
                        <fieldset>
                            <legend class="sr-only">Personal Information</legend>
                            
                            <div class="form-group">
                                <label for="issue-name">Full Name <span class="required" aria-label="required">*</span></label>
                                <div class="input-wrapper">
                                    <input type="text" 
                                           id="issue-name" 
                                           name="name" 
                                           required 
                                           aria-required="true"
                                           aria-describedby="issue-name-error issue-name-help"
                                           autocomplete="name"
                                           data-validation="name">
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div id="issue-name-help" class="sr-only">Enter your full name for contact purposes</div>
                                <div class="error-message" id="issue-name-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="issue-name-success" aria-live="polite"></div>
                            </div>

                            <div class="form-group">
                                <fieldset>
                                    <legend>Contact Method <span class="required" aria-label="required">*</span></legend>
                                    <div class="contact-options" role="radiogroup" aria-required="true" aria-describedby="contact-method-help">
                                        <label>
                                            <input type="radio" 
                                                   name="contact-method" 
                                                   value="email" 
                                                   checked 
                                                   data-target="issue-contact"
                                                   aria-describedby="contact-method-help"> 
                                            Email
                                        </label>
                                        <label>
                                            <input type="radio" 
                                                   name="contact-method" 
                                                   value="phone" 
                                                   data-target="issue-contact"
                                                   aria-describedby="contact-method-help"> 
                                            Phone
                                        </label>
                                    </div>
                                    <div id="contact-method-help" class="sr-only">Choose your preferred contact method</div>
                                </fieldset>
                                <div class="input-wrapper">
                                    <input type="email" 
                                           id="issue-contact" 
                                           name="contact" 
                                           placeholder="Enter your email address" 
                                           required
                                           aria-required="true"
                                           aria-describedby="issue-contact-error"
                                           autocomplete="email"
                                           data-validation="email"
                                           aria-label="Contact information">
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div class="error-message" id="issue-contact-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="issue-contact-success" aria-live="polite"></div>
                            </div>
                        </fieldset>

                        <fieldset>
                            <legend class="sr-only">Booking Information</legend>
                            
                            <div class="form-group">
                                <label for="booking-details">Booking Details</label>
                                <div class="input-wrapper">
                                    <input type="text" 
                                           id="booking-details" 
                                           name="booking-details" 
                                           placeholder="Booking reference number or details"
                                           aria-describedby="booking-details-help"
                                           data-validation="optional">
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div id="booking-details-help" class="help-text">Optional: Enter any booking reference numbers or details you have</div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="booking-date">Booking Date <span class="required" aria-label="required">*</span></label>
                                    <div class="input-wrapper">
                                        <input type="date" 
                                               id="booking-date" 
                                               name="booking-date" 
                                               required
                                               aria-required="true"
                                               aria-describedby="booking-date-error booking-date-help"
                                               data-validation="date">
                                        <div class="validation-icon" aria-hidden="true"></div>
                                    </div>
                                    <div id="booking-date-help" class="help-text">Select the date of your original booking</div>
                                    <div class="error-message" id="booking-date-error" role="alert" aria-live="polite"></div>
                                    <div class="success-message" id="booking-date-success" aria-live="polite"></div>
                                </div>
                                <div class="form-group">
                                    <label for="booking-time">Booking Time <span class="required" aria-label="required">*</span></label>
                                    <div class="input-wrapper">
                                        <input type="time" 
                                               id="booking-time" 
                                               name="booking-time" 
                                               required
                                               aria-required="true"
                                               aria-describedby="booking-time-error booking-time-help"
                                               data-validation="time">
                                        <div class="validation-icon" aria-hidden="true"></div>
                                    </div>
                                    <div id="booking-time-help" class="help-text">Select the time of your original booking</div>
                                    <div class="error-message" id="booking-time-error" role="alert" aria-live="polite"></div>
                                    <div class="success-message" id="booking-time-success" aria-live="polite"></div>
                                </div>
                            </div>

                            <div class="form-row">
                                <div class="form-group">
                                    <label for="walkin-time">Walk-in Time</label>
                                    <div class="input-wrapper">
                                        <input type="time" 
                                               id="walkin-time" 
                                               name="walkin-time"
                                               aria-describedby="walkin-time-help"
                                               data-validation="optional">
                                        <div class="validation-icon" aria-hidden="true"></div>
                                    </div>
                                    <div id="walkin-time-help" class="help-text">Optional: What time did you actually arrive?</div>
                                </div>
                                <div class="form-group">
                                    <label for="walkout-time">Walk-out Time</label>
                                    <div class="input-wrapper">
                                        <input type="time" 
                                               id="walkout-time" 
                                               name="walkout-time"
                                               aria-describedby="walkout-time-help"
                                               data-validation="optional">
                                        <div class="validation-icon" aria-hidden="true"></div>
                                    </div>
                                    <div id="walkout-time-help" class="help-text">Optional: What time did you leave?</div>
                                </div>
                            </div>
                        </fieldset>

                        <fieldset>
                            <legend class="sr-only">Issue Details</legend>
                            
                            <div class="form-group">
                                <label for="issue-description">Describe Your Issue <span class="required" aria-label="required">*</span></label>
                                <div class="input-wrapper">
                                    <textarea id="issue-description" 
                                              name="issue-description" 
                                              placeholder="Please provide detailed information about the issue you encountered..." 
                                              required
                                              aria-required="true"
                                              aria-describedby="issue-description-error issue-description-help"
                                              rows="5"
                                              data-validation="textarea"
                                              maxlength="1000"></textarea>
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div class="char-count" id="issue-description-count">0/1000 characters</div>
                                <div id="issue-description-help" class="help-text">Provide detailed information about the issue you experienced, including what happened and when</div>
                                <div class="error-message" id="issue-description-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="issue-description-success" aria-live="polite"></div>
                            </div>
                        </fieldset>

                        <button type="submit" 
                                class="submit-btn" 
                                id="issue-submit"
                                aria-describedby="issue-submit-help">
                            <span class="btn-text">Submit Issue Report</span>
                            <span class="loading" aria-hidden="true"></span>
                        </button>
                        <div id="issue-submit-help" class="sr-only">Submit your issue report to our support team</div>
                    </form>
                </div>
            </section>

            <!-- Enquiry Form -->
            <section id="enquiry-form" class="form-section" role="tabpanel" aria-labelledby="enquiry-tab" aria-hidden="true">
                <div class="form-container">
                    <form id="enquiry-form-element" novalidate aria-label="Enquiry form">
                        <fieldset>
                            <legend class="sr-only">Personal Information</legend>
                            
                            <div class="form-group">
                                <label for="enquiry-name">Full Name <span class="required" aria-label="required">*</span></label>
                                <div class="input-wrapper">
                                    <input type="text" 
                                           id="enquiry-name" 
                                           name="name" 
                                           required
                                           aria-required="true"
                                           aria-describedby="enquiry-name-error enquiry-name-help"
                                           autocomplete="name"
                                           data-validation="name">
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div id="enquiry-name-help" class="sr-only">Enter your full name for contact purposes</div>
                                <div class="error-message" id="enquiry-name-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="enquiry-name-success" aria-live="polite"></div>
                            </div>

                            <div class="form-group">
                                <label for="enquiry-phone">Contact Number <span class="required" aria-label="required">*</span></label>
                                <div class="input-wrapper">
                                    <input type="tel" 
                                           id="enquiry-phone" 
                                           name="contact-number" 
                                           placeholder="Enter your phone number" 
                                           required
                                           aria-required="true"
                                           aria-describedby="enquiry-phone-error enquiry-phone-help"
                                           autocomplete="tel"
                                           data-validation="phone">
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div id="enquiry-phone-help" class="help-text">Enter your phone number including country code if international</div>
                                <div class="error-message" id="enquiry-phone-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="enquiry-phone-success" aria-live="polite"></div>
                            </div>
                        </fieldset>

                        <fieldset>
                            <legend class="sr-only">Booking Preferences</legend>
                            
                            <div class="form-row">
                                <div class="form-group">
                                    <label for="enquiry-date">Preferred Date <span class="required" aria-label="required">*</span></label>
                                    <div class="input-wrapper">
                                        <input type="date" 
                                               id="enquiry-date" 
                                               name="booking-date" 
                                               required
                                               aria-required="true"
                                               aria-describedby="enquiry-date-error enquiry-date-help"
                                               data-validation="date">
                                        <div class="validation-icon" aria-hidden="true"></div>
                                    </div>
                                    <div id="enquiry-date-help" class="help-text">Select your preferred booking date</div>
                                    <div class="error-message" id="enquiry-date-error" role="alert" aria-live="polite"></div>
                                    <div class="success-message" id="enquiry-date-success" aria-live="polite"></div>
                                </div>
                                <div class="form-group">
                                    <label for="enquiry-time">Preferred Time <span class="required" aria-label="required">*</span></label>
                                    <div class="input-wrapper">
                                        <input type="time" 
                                               id="enquiry-time" 
                                               name="booking-time" 
                                               required
                                               aria-required="true"
                                               aria-describedby="enquiry-time-error enquiry-time-help"
                                               data-validation="time">
                                        <div class="validation-icon" aria-hidden="true"></div>
                                    </div>
                                    <div id="enquiry-time-help" class="help-text">Select your preferred booking time</div>
                                    <div class="error-message" id="enquiry-time-error" role="alert" aria-live="polite"></div>
                                    <div class="success-message" id="enquiry-time-success" aria-live="polite"></div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="people-count">Number of People <span class="required" aria-label="required">*</span></label>
                                <div class="input-wrapper">
                                    <select id="people-count" 
                                            name="people-count" 
                                            required
                                            aria-required="true"
                                            aria-describedby="people-count-error people-count-help"
                                            data-validation="select">
                                        <option value="">Select number of people</option>
                                        <option value="1">1 person</option>
                                        <option value="2">2 people</option>
                                        <option value="3">3 people</option>
                                        <option value="4">4 people</option>
                                        <option value="5">5 people</option>
                                        <option value="6">6 people</option>
                                        <option value="7">7 people</option>
                                        <option value="8">8 people</option>
                                        <option value="9">9 people</option>
                                        <option value="10+">10+ people</option>
                                    </select>
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div id="people-count-help" class="help-text">Select the total number of people for your booking</div>
                                <div class="error-message" id="people-count-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="people-count-success" aria-live="polite"></div>
                            </div>
                        </fieldset>

                        <fieldset>
                            <legend class="sr-only">Enquiry Details</legend>
                            
                            <div class="form-group">
                                <label for="enquiry-description">Tell Us More About Your Enquiry <span class="required" aria-label="required">*</span></label>
                                <div class="input-wrapper">
                                    <textarea id="enquiry-description" 
                                              name="enquiry-description" 
                                              placeholder="Please provide details about your enquiry, special requirements, or any questions you have..." 
                                              required
                                              aria-required="true"
                                              aria-describedby="enquiry-description-error enquiry-description-help"
                                              rows="5"
                                              data-validation="textarea"
                                              maxlength="1000"></textarea>
                                    <div class="validation-icon" aria-hidden="true"></div>
                                </div>
                                <div class="char-count" id="enquiry-description-count">0/1000 characters</div>
                                <div id="enquiry-description-help" class="help-text">Provide details about your enquiry, including any special requirements or questions</div>
                                <div class="error-message" id="enquiry-description-error" role="alert" aria-live="polite"></div>
                                <div class="success-message" id="enquiry-description-success" aria-live="polite"></div>
                            </div>
                        </fieldset>

                        <button type="submit" 
                                class="submit-btn" 
                                id="enquiry-submit"
                                aria-describedby="enquiry-submit-help">
                            <span class="btn-text">Submit Enquiry</span>
                            <span class="loading" aria-hidden="true"></span>
                        </button>
                        <div id="enquiry-submit-help" class="sr-only">Submit your enquiry to our team</div>
                    </form>
                </div>
            </section>
        </main>
    </div>

    <!-- External JavaScript -->
    <script src="script.js"></script>

    <!-- Inline Styles (Move to styles.css) -->
    <style>
        /* ==========================================================================
           EXTERNAL STYLESHEET - styles.css
           Move this entire style block to a separate styles.css file
           ========================================================================== */

        /* CSS Custom Properties */
        :root {
            --primary-color: #3498db;
            --primary-dark: #2980b9;
            --secondary-color: #2c3e50;
            --success-color: #27ae60;
            --error-color: #e74c3c;
            --warning-color: #f39c12;
            --light-bg: #f8f9fa;
            --border-color: #e9ecef;
            --text-color: #2c3e50;
            --text-muted: #6c757d;
            --border-radius: 10px;
            --border-radius-lg: 20px;
            --spacing-xs: 5px;
            --spacing-sm: 10px;
            --spacing-md: 15px;
            --spacing-lg: 20px;
            --spacing-xl: 25px;
            --spacing-xxl: 40px;
            --font-size-sm: 0.85rem;
            --font-size-base: 1rem;
            --font-size-lg: 1.1rem;
            --transition: all 0.3s ease;
        }

        /* Reset and Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: var(--spacing-lg);
        }

        /* Container */
        .container {
            width: min(800px, 95vw);
            margin: 0 auto;
            background: white;
            border-radius: var(--border-radius-lg);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
            overflow: hidden;
            min-height: 0;
        }

        /* Header */
        .header {
            background: linear-gradient(135deg, var(--secondary-color) 0%, var(--primary-color) 100%);
            color: white;
            padding: var(--spacing-xxl) calc(var(--spacing-lg) + var(--spacing-md));
            text-align: center;
        }

        .header h1 {
            font-size: clamp(1.8rem, 5vw, 2.5rem);
            margin-bottom: var(--spacing-sm);
            font-weight: 300;
        }

        .header p {
            font-size: clamp(0.95rem, 2.5vw, 1.1rem);
            opacity: 0.9;
        }

        /* Tab Navigation */
        .form-tabs {
            display: flex;
            background: var(--light-bg);
        }

        .tab-button {
            flex: 1;
            padding: var(--spacing-lg);
            background: none;
            border: none;
            font-size: clamp(0.9rem, 2.5vw, 1.1rem);
            font-weight: 600;
            color: var(--text-muted);
            cursor: pointer;
            transition: var(--transition);
            position: relative;
            min-height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-family: inherit;
        }

        .tab-button.active {
            color: var(--primary-color);
            background: white;
        }

        .tab-button.active::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--primary-color);
        }

        /* Form Sections */
        .form-container {
            padding: var(--spacing-xxl) calc(var(--spacing-lg) + var(--spacing-md));
        }

        .form-section {
            display: none;
        }

        .form-section.active {
            display: block;
            animation: fadeIn 0.3s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Form Elements */
        .form-group {
            margin-bottom: var(--spacing-xl);
        }

        .form-row {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: var(--spacing-lg);
            margin-bottom: var(--spacing-xl);
        }

        .form-row .form-group {
            margin-bottom: 0;
        }

        fieldset {
            border: none;
            padding: 0;
            margin: 0;
        }

        legend {
            font-weight: 600;
            color: var(--text-color);
            font-size: 1.1rem;
            margin-bottom: var(--spacing-md);
        }

        label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: var(--text-color);
            font-size: 0.95rem;
        }

        /* Input Wrapper for Validation Icons */
        .input-wrapper {
            position: relative;
        }

        .input-wrapper .validation-icon {
            position: absolute;
            right: 12px;
            top: 50%;
            transform: translateY(-50%);
            width: 20px;
            height: 20px;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .input-wrapper .validation-icon::before {
            content: '';
            position: absolute;
            width: 20px;
            height: 20px;
            border-radius: 50%;
        }

        .input-wrapper.valid .validation-icon {
            opacity: 1;
        }

        .input-wrapper.valid .validation-icon::before {
            background: var(--success-color);
        }

        .input-wrapper.valid .validation-icon::after {
            content: 'âœ“';
            position: absolute;
            color: white;
            font-size: 12px;
            font-weight: bold;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        .input-wrapper.invalid .validation-icon {
            opacity: 1;
        }

        .input-wrapper.invalid .validation-icon::before {
            background: var(--error-color);
        }

        .input-wrapper.invalid .validation-icon::after {
            content: 'âœ—';
            position: absolute;
            color: white;
            font-size: 12px;
            font-weight: bold;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
        }

        /* Form Inputs */
        input, textarea, select {
            width: 100%;
            padding: var(--spacing-md);
            border: 2px solid var(--border-color);
            border-radius: var(--border-radius);
            font-size: var(--font-size-base);
            transition: var(--transition);
            background: var(--light-bg);
            font-family: inherit;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: var(--primary-color);
            background: white;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .input-wrapper.valid input,
        .input-wrapper.valid textarea,
        .input-wrapper.valid select {
            border-color: var(--success-color);
            background: #f8fff8;
            padding-right: 45px;
        }

        .input-wrapper.invalid input,
        .input-wrapper.invalid textarea,
        .input-wrapper.invalid select {
            border-color: var(--error-color);
            background: #fff5f5;
            padding-right: 45px;
        }

        textarea {
            resize: vertical;
            min-height: 120px;
        }

        /* Contact Options */
        .contact-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: var(--spacing-md);
            margin-bottom: var(--spacing-md);
        }

        .contact-options label {
            margin-bottom: 0;
            font-weight: normal;
            cursor: pointer;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
            padding: var(--spacing-sm);
            border-radius: 8px;
            transition: background-color 0.2s ease;
            min-height: 44px;
            border: 2px solid var(--border-color);
        }

        .contact-options label:hover {
            background-color: var(--light-bg);
        }

        .contact-options input[type="radio"]:checked + span {
            font-weight: 600;
        }

        .contact-options input[type="radio"] {
            width: auto;
            margin: 0;
        }

        /* Message Styles */
        .error-message {
            color: var(--error-color);
            font-size: var(--font-size-sm);
            margin-top: var(--spacing-xs);
            display: none;
            padding: var(--spacing-xs) var(--spacing-sm);
            background: #fff5f5;
            border-radius: var(--spacing-xs);
            border-left: 3px solid var(--error-color);
        }

        .success-message {
            color: var(--success-color);
            font-size: var(--font-size-sm);
            margin-top: var(--spacing-xs);
            display: none;
            padding: var(--spacing-xs) var(--spacing-sm);
            background: #f8fff8;
            border-radius: var(--spacing-xs);
            border-left: 3px solid var(--success-color);
        }

        .help-text {
            color: var(--text-muted);
            font-size: var(--font-size-sm);
            margin-top: var(--spacing-xs);
        }

        .char-count {
            font-size: var(--font-size-sm);
            color: var(--text-muted);
            text-align: right;
            margin-top: var(--spacing-xs);
        }

        .char-count.warning {
            color: var(--warning-color);
        }

        .char-count.error {
            color: var(--error-color);
        }

        /* Required Field Indicator */
        .required {
            color: var(--error-color);
        }

        /* Submit Button */
        .submit-btn {
            background: linear-gradient(135deg, var(--primary-color) 0%, var(--primary-dark) 100%);
            color: white;
            padding: 18px var(--spacing-xxl);
            border: none;
            border-radius: 50px;
            font-size: var(--font-size-lg);
            font-weight: 600;
            cursor: pointer;
            transition: var(--transition);
            width: 100%;
            margin-top: var(--spacing-lg);
            font-family: inherit;
            min-height: 56px;
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
        }

        .submit-btn:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 10px 25px rgba(52, 152, 219, 0.3);
        }

        .submit-btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .submit-btn .loading {
            display: none;
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-top: 2px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
            margin-left: var(--spacing-sm);
        }

        .submit-btn.loading .btn-text {
            opacity: 0.7;
        }

        .submit-btn.loading .loading {
            display: inline-block;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Popup Styles */
        .popup-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0, 0, 0, 0.5);
            z-index: 999;
            display: none;
        }

        .success-popup {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: white;
            padding: var(--spacing-xxl);
            border-radius: var(--spacing-md);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.2);
            z-index: 1000;
            text-align: center;
            display: none;
            max-width: 400px;
            width: 90%;
        }

        .popup-close-btn {
            width: auto;
            margin-top: var(--spacing-lg);
            padding: var(--spacing-sm) var(--spacing-xxl);
        }

        /* Accessibility Enhancements */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0, 0, 0, 0);
            white-space: nowrap;
            border: 0;
        }

        .skip-link {
            position: absolute;
            top: -40px;
            left: 6px;
            background: var(--primary-color);
            color: white;
            padding: 8px;
            text-decoration: none;
            border-radius: 4px;
            z-index: 1000;
        }

        .skip-link:focus {
            top: 6px;
        }

        /* Focus Management */
        *:focus {
            outline: 2px solid var(--primary-color);
            outline-offset: 2px;
        }

        /* High contrast mode support */
        @media (prefers-contrast: high) {
            input, textarea, select {
                border-width: 3px;
            }
            
            .tab-button.active::after {
                height: 4px;
            }
            
            .submit-btn {
                border: 2px solid white;
            }
        }

        /* Responsive Design */
        @media (min-width: 1200px) {
            .container {
                max-width: 900px;
            }
            
            .form-container {
                padding: 50px 40px;
            }
        }

        @media (min-width: 768px) and (max-width: 1199px) {
            .container {
                max-width: 90%;
            }
            
            .header {
                padding: 35px 25px;
            }
        }

        @media (max-width: 767px) {
            body {
                padding: var(--spacing-md);
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }
            
            .contact-options {
                grid-template-columns: 1fr;
            }
        }

        @media (max-width: 575px) {
            body {
                padding: var(--spacing-sm);
            }
            
            .container {
                border-radius: var(--spacing-md);
            }
            
            .header {
                padding: 25px var(--spacing-md);
            }
            
            .form-container {
                padding: 25px var(--spacing-md);
            }
            
            .tab-button {
                padding: var(--spacing-md) var(--spacing-sm);
                font-size: 0.95rem;
            }
        }

        /* Reduced motion preferences */
        @media (prefers-reduced-motion: reduce) {
            *, *::before, *::after {
                animation-duration: 0.01ms !important;
                animation-iteration-count: 1 !important;
                transition-duration: 0.01ms !important;
            }
        }

        /* Print styles */
        @media print {
            body {
                background: white;
                padding: 0;
            }
            
            .container {
                box-shadow: none;
                border: 1px solid #ccc;
            }
            
            .header {
                background: var(--light-bg) !important;
                color: var(--text-color) !important;
            }
            
            .submit-btn, .loading {
                display: none;
            }
        }
    </style>

    <!-- Inline JavaScript (Move to script.js) -->
    <script>
        /* ==========================================================================
           EXTERNAL JAVASCRIPT - script.js
           Move this entire script block to a separate script.js file
           ========================================================================== */

        // Application Configuration
        const CONFIG = {
            email: {
                serviceId: 'service_ar10rnj',
                issueTemplateId: 'template_bjh7sm3',
                enquiryTemplateId: 'template_l9an0sq',
                publicKey: 'i5TYdclyR0ihs1ZxG',
                adminEmail: 'casadeamorinfo@gmail.com'
            },
            validation: {
                name: {
                    minLength: 2,
                    pattern: /^[a-zA-Z\s'-]+$/,
                    messages: {
                        required: 'Full name is required',
                        minLength: 'Name must be at least 2 characters long',
                        pattern: 'Name can only contain letters, spaces, hyphens, and apostrophes'
                    }
                },
                email: {
                    pattern: /^[^\s@]+@[^\s@]+\.[^\s@]+$/,
                    messages: {
                        required: 'Email address is required',
                        pattern: 'Please enter a valid email address (e.g., name@example.com)'
                    }
                },
                phone: {
                    pattern: /^[\+]?[0-9\s\-\(\)]{10,}$/,
                    messages: {
                        required: 'Phone number is required',
                        pattern: 'Please enter a valid phone number (minimum 10 digits)'
                    }
                },
                date: {
                    messages: {
                        required: 'Please select a date',
                        past: 'Date cannot be in the past',
                        invalid: 'Please enter a valid date'
                    }
                },
                time: {
                    messages: {
                        required: 'Please select a time',
                        invalid: 'Please enter a valid time'
                    }
                },
                textarea: {
                    minLength: 10,
                    maxLength: 1000,
                    messages: {
                        required: 'This field is required',
                        minLength: 'Please provide at least 10 characters',
                        maxLength: 'Maximum 1000 characters allowed'
                    }
                },
                select: {
                    messages: {
                        required: 'Please make a selection'
                    }
                }
            }
        };

        // Application State
        let currentTab = 'issue';
        let validationTimeouts = new Map();

        // Initialize Application
        document.addEventListener('DOMContentLoaded', function() {
            initializeEmailJS();
            initializeDateFields();
            setupEventListeners();
            setupValidation();
            setupAccessibilityFeatures();
        });

        // Initialize EmailJS
        function initializeEmailJS() {
            if (typeof emailjs !== 'undefined') {
                emailjs.init(CONFIG.email.publicKey);
            }
        }

        // Setup Event Listeners
        function setupEventListeners() {
            // Tab navigation
            document.querySelectorAll('[data-tab]').forEach(tab => {
                tab.addEventListener('click', handleTabClick);
            });

            // Contact method toggle
            document.querySelectorAll('input[name="contact-method"]').forEach(radio => {
                radio.addEventListener('change', handleContactMethodChange);
            });

            // Form submissions
            document.getElementById('issue-form-element').addEventListener('submit', (e) => {
                e.preventDefault();
                handleFormSubmit(e.target, 'issue');
            });

            document.getElementById('enquiry-form-element').addEventListener('submit', (e) => {
                e.preventDefault();
                handleFormSubmit(e.target, 'enquiry');
            });

            // Popup close
            document.getElementById('popup-close').addEventListener('click', closePopup);
            document.getElementById('popup-overlay').addEventListener('click', closePopup);

            // Character counters
            setupCharacterCounters();
        }

        // Tab Click Handler
        function handleTabClick(event) {
            const tabName = event.target.dataset.tab;
            switchTab(tabName);
        }

        // Switch Tab Function
        function switchTab(tabName) {
            currentTab = tabName;
            
            const tabs = document.querySelectorAll('[role="tab"]');
            const panels = document.querySelectorAll('[role="tabpanel"]');
            
            // Update tab states
            tabs.forEach(tab => {
                const isSelected = tab.dataset.tab === tabName;
                tab.classList.toggle('active', isSelected);
                tab.setAttribute('aria-selected', isSelected);
                tab.setAttribute('tabindex', isSelected ? '0' : '-1');
            });
            
            // Update panel states
            panels.forEach(panel => {
                const isActive = panel.id === tabName + '-form';
                panel.classList.toggle('active', isActive);
                panel.setAttribute('aria-hidden', (!isActive).toString());
            });
            
            // Announce tab change
            announceToScreenReader(`Switched to ${tabName === 'issue' ? 'Report Issue' : 'Make Enquiry'} form`);
            
            // Focus management
            setTimeout(() => {
                const firstInput = document.querySelector(`#${tabName}-form input:not([type="hidden"]), #${tabName}-form select, #${tabName}-form textarea`);
                if (firstInput) {
                    firstInput.focus();
                }
            }, 100);
        }

        // Contact Method Change Handler
        function handleContactMethodChange(event) {
            const contactField = document.querySelector(event.target.dataset.target);
            const selectedMethod = event.target.value;
            
            if (selectedMethod === 'email') {
                contactField.type = 'email';
                contactField.placeholder = 'Enter your email address';
                contactField.setAttribute('autocomplete', 'email');
                contactField.setAttribute('aria-label', 'Email address');
                contactField.setAttribute('data-validation', 'email');
            } else {
                contactField.type = 'tel';
                contactField.placeholder = 'Enter your phone number';
                contactField.setAttribute('autocomplete', 'tel');
                contactField.setAttribute('aria-label', 'Phone number');
                contactField.setAttribute('data-validation', 'phone');
            }
            
            contactField.value = '';
            clearFieldValidation(contactField);
            
            announceToScreenReader(`Contact method changed to ${selectedMethod}`);
            
            setTimeout(() => {
                contactField.focus();
            }, 100);
        }

        // Setup Validation
        function setupValidation() {
            const fields = document.querySelectorAll('input, textarea, select');
            
            fields.forEach(field => {
                // Real-time validation on input
                field.addEventListener('input', (e) => {
                    debounceValidation(e.target, 300);
                });
                
                // Immediate validation on blur
                field.addEventListener('blur', (e) => {
                    validateField(e.target);
                });
            });
        }

        // Debounced Validation
        function debounceValidation(field, delay) {
            const fieldId = field.id;
            
            // Clear existing timeout
            if (validationTimeouts.has(fieldId)) {
                clearTimeout(validationTimeouts.get(fieldId));
            }
            
            // Set new timeout
            const timeoutId = setTimeout(() => {
                validateField(field);
                validationTimeouts.delete(fieldId);
            }, delay);
            
            validationTimeouts.set(fieldId, timeoutId);
        }

        // Enhanced Field Validation
        function validateField(field) {
            const validationType = field.dataset.validation;
            const value = field.value.trim();
            const wrapper = field.closest('.input-wrapper');
            
            // Skip validation for optional fields that are empty
            if (validationType === 'optional' && !value) {
                clearFieldValidation(field);
                return true;
            }
            
            // Required field check
            if (field.hasAttribute('required') && !value) {
                const config = CONFIG.validation[validationType] || {};
                showFieldError(field, config.messages?.required || 'This field is required');
                return false;
            }
            
            // Skip type-specific validation if field is empty and not required
            if (!value && !field.hasAttribute('required')) {
                clearFieldValidation(field);
                return true;
            }
            
            // Type-specific validation
            let isValid = true;
            let errorMessage = '';
            
            switch (validationType) {
                case 'name':
                    isValid = validateName(value);
                    if (!isValid) errorMessage = getNameValidationError(value);
                    break;
                    
                case 'email':
                    isValid = validateEmail(value);
                    if (!isValid) errorMessage = CONFIG.validation.email.messages.pattern;
                    break;
                    
                case 'phone':
                    isValid = validatePhone(value);
                    if (!isValid) errorMessage = CONFIG.validation.phone.messages.pattern;
                    break;
                    
                case 'date':
                    isValid = validateDate(field, value);
                    if (!isValid) errorMessage = getDateValidationError(field, value);
                    break;
                    
                case 'time':
                    isValid = validateTime(value);
                    if (!isValid) errorMessage = CONFIG.validation.time.messages.invalid;
                    break;
                    
                case 'textarea':
                    isValid = validateTextarea(value);
                    if (!isValid) errorMessage = getTextareaValidationError(value);
                    break;
                    
                case 'select':
                    isValid = value !== '';
                    if (!isValid) errorMessage = CONFIG.validation.select.messages.required;
                    break;
            }
            
            if (isValid) {
                showFieldSuccess(field);
            } else {
                showFieldError(field, errorMessage);
            }
            
            return isValid;
        }

        // Individual Validation Functions
        function validateName(value) {
            const config = CONFIG.validation.name;
            return value.length >= config.minLength && config.pattern.test(value);
        }

        function getNameValidationError(value) {
            const config = CONFIG.validation.name;
            if (value.length < config.minLength) {
                return config.messages.minLength;
            }
            if (!config.pattern.test(value)) {
                return config.messages.pattern;
            }
            return config.messages.required;
        }

        function validateEmail(value) {
            return CONFIG.validation.email.pattern.test(value);
        }

        function validatePhone(value) {
            return CONFIG.validation.phone.pattern.test(value);
        }

        function validateDate(field, value) {
            if (!value) return false;
            
            const selectedDate = new Date(value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            return selectedDate >= today;
        }

        function getDateValidationError(field, value) {
            if (!value) return CONFIG.validation.date.messages.required;
            
            const selectedDate = new Date(value);
            const today = new Date();
            today.setHours(0, 0, 0, 0);
            
            if (selectedDate < today) {
                return CONFIG.validation.date.messages.past;
            }
            
            return CONFIG.validation.date.messages.invalid;
        }

        function validateTime(value) {
            if (!value) return false;
            return /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/.test(value);
        }

        function validateTextarea(value) {
            const config = CONFIG.validation.textarea;
            return value.length >= config.minLength && value.length <= config.maxLength;
        }

        function getTextareaValidationError(value) {
            const config = CONFIG.validation.textarea;
            if (value.length < config.minLength) {
                return config.messages.minLength;
            }
            if (value.length > config.maxLength) {
                return config.messages.maxLength;
            }
            return config.messages.required;
        }

        // Validation UI Functions
        function showFieldError(field, message) {
            const wrapper = field.closest('.input-wrapper');
            const errorEl = document.getElementById(field.id + '-error');
            const successEl = document.getElementById(field.id + '-success');
            
            field.setAttribute('aria-invalid', 'true');
            
            if (wrapper) {
                wrapper.classList.remove('valid');
                wrapper.classList.add('invalid');
            }
            
            if (errorEl) {
                errorEl.textContent = message;
                errorEl.style.display = 'block';
            }
            
            if (successEl) {
                successEl.style.display = 'none';
            }
            
            // Announce error to screen readers
            announceToScreenReader(`Error in ${getFieldLabel(field)}: ${message}`);
        }

        function showFieldSuccess(field) {
            const wrapper = field.closest('.input-wrapper');
            const errorEl = document.getElementById(field.id + '-error');
            const successEl = document.getElementById(field.id + '-success');
            
            field.removeAttribute('aria-invalid');
            
            if (wrapper) {
                wrapper.classList.remove('invalid');
                wrapper.classList.add('valid');
            }
            
            if (errorEl) {
                errorEl.style.display = 'none';
            }
            
            if (successEl) {
                successEl.textContent = 'Valid';
                successEl.style.display = 'block';
            }
        }

        function clearFieldValidation(field) {
            const wrapper = field.closest('.input-wrapper');
            const errorEl = document.getElementById(field.id + '-error');
            const successEl = document.getElementById(field.id + '-success');
            
            field.removeAttribute('aria-invalid');
            
            if (wrapper) {
                wrapper.classList.remove('valid', 'invalid');
            }
            
            if (errorEl) {
                errorEl.style.display = 'none';
                errorEl.textContent = '';
            }
            
            if (successEl) {
                successEl.style.display = 'none';
                successEl.textContent = '';
            }
        }

        function getFieldLabel(field) {
            const label = field.labels?.[0]?.textContent || field.getAttribute('aria-label') || field.name || field.id;
            return label.replace('*', '').trim();
        }

        // Character Counters
        function setupCharacterCounters() {
            const textareas = document.querySelectorAll('textarea[maxlength]');
            
            textareas.forEach(textarea => {
                const counterId = textarea.id + '-count';
                const counter = document.getElementById(counterId);
                
                if (counter) {
                    textarea.addEventListener('input', () => {
                        updateCharacterCount(textarea, counter);
                    });
                    
                    // Initialize count
                    updateCharacterCount(textarea, counter);
                }
            });
        }

        function updateCharacterCount(textarea, counter) {
            const current = textarea.value.length;
            const max = parseInt(textarea.getAttribute('maxlength'));
            const percentage = current / max;
            
            counter.textContent = `${current}/${max} characters`;
            
            // Update styling based on usage
            counter.classList.remove('warning', 'error');
            if (percentage >= 1) {
                counter.classList.add('error');
            } else if (percentage >= 0.8) {
                counter.classList.add('warning');
            }
        }

        // Initialize Date Fields
        function initializeDateFields() {
            const today = new Date().toISOString().split('T')[0];
            
            document.getElementById('booking-date')?.setAttribute('min', today);
            document.getElementById('enquiry-date')?.setAttribute('min', today);
        }

        // Form Submission Handler
        function handleFormSubmit(form, formType) {
            announceToScreenReader('Validating form...');
            
            // Validate all fields
            let isValid = true;
            let firstErrorField = null;
            const fields = form.querySelectorAll('input, textarea, select');
            
            fields.forEach(field => {
                if (!validateField(field)) {
                    isValid = false;
                    if (!firstErrorField) {
                        firstErrorField = field;
                    }
                }
            });

            if (!isValid) {
                if (firstErrorField) {
                    firstErrorField.focus();
                    firstErrorField.scrollIntoView({ behavior: 'smooth', block: 'center' });
                }
                announceToScreenReader('Please fix the errors in the form before submitting');
                return;
            }

            // Show loading state
            const submitBtn = document.getElementById(formType + '-submit');
            setSubmitButtonLoading(submitBtn, true);
            
            announceToScreenReader(`Submitting your ${formType}...`);

            // Collect form data
            const formData = new FormData(form);
            const data = Object.fromEntries(formData.entries());
            
            // Send email
            sendEmail(data, formType)
                .then(() => {
                    showSuccessPopup(formType);
                    resetForm(form, formType);
                })
                .catch((error) => {
                    console.error('Email send error:', error);
                    const errorMsg = 'Failed to send email. Please try again or contact us directly.';
                    announceToScreenReader(errorMsg);
                    showFormError(errorMsg);
                })
                .finally(() => {
                    setSubmitButtonLoading(submitBtn, false);
                });
        }

        // Submit Button Loading State
        function setSubmitButtonLoading(button, isLoading) {
            button.disabled = isLoading;
            button.classList.toggle('loading', isLoading);
            button.setAttribute('aria-busy', isLoading.toString());
            
            const btnText = button.querySelector('.btn-text');
            const loading = button.querySelector('.loading');
            
            if (isLoading) {
                btnText.textContent = btnText.textContent.replace('Submit', 'Submitting');
                loading.setAttribute('aria-hidden', 'false');
            } else {
                btnText.textContent = btnText.textContent.replace('Submitting', 'Submit');
                loading.setAttribute('aria-hidden', 'true');
            }
        }

        // Show Form Error
        function showFormError(message) {
            // You could implement a form-level error display here
            // For now, using alert as fallback
            alert(message);
        }

        // Reset Form
        function resetForm(form, formType) {
            form.reset();
            
            // Clear all validation states
            const fields = form.querySelectorAll('input, textarea, select');
            fields.forEach(field => {
                clearFieldValidation(field);
            });
            
            // Reset contact method for issue form
            if (formType === 'issue') {
                const emailRadio = form.querySelector('input[name="contact-method"][value="email"]');
                if (emailRadio) {
                    emailRadio.checked = true;
                    emailRadio.dispatchEvent(new Event('change'));
                }
            }
            
            // Reset character counters
            const textareas = form.querySelectorAll('textarea[maxlength]');
            textareas.forEach(textarea => {
                const counterId = textarea.id + '-count';
                const counter = document.getElementById(counterId);
                if (counter) {
                    updateCharacterCount(textarea, counter);
                }
            });
        }

        // Email Sending Function
        function sendEmail(data, formType) {
            if (typeof emailjs === 'undefined') {
                return Promise.reject('EmailJS not loaded');
            }

            const templateParams = {
                to_email: CONFIG.email.adminEmail,
                from_name: data.name,
                form_type: formType.toUpperCase(),
                submitted_at: new Date().toLocaleString(),
                
                // Common fields
                contact_method: data['contact-method'] || 'N/A',
                contact_info: data.contact || data['contact-number'] || 'N/A',
                booking_date: data['booking-date'] || 'N/A',
                booking_time: data['booking-time'] || 'N/A',
                
                // Issue-specific fields
                booking_details: data['booking-details'] || 'N/A',
                walkin_time: data['walkin-time'] || 'N/A',
                walkout_time: data['walkout-time'] || 'N/A',
                issue_description: data['issue-description'] || 'N/A',
                
                // Enquiry-specific fields
                contact_number: data['contact-number'] || 'N/A',
                people_count: data['people-count'] || 'N/A',
                enquiry_description: data['enquiry-description'] || 'N/A',
                
                // Email body
                email_body: createEmailBody(data, formType)
            };

            const templateId = formType === 'issue' ? 
                CONFIG.email.issueTemplateId : 
                CONFIG.email.enquiryTemplateId;

            return emailjs.send(
                CONFIG.email.serviceId,
                templateId,
                templateParams
            );
        }

        // Create Email Body
        function createEmailBody(data, formType) {
            const timestamp = new Date().toLocaleString();
            
            if (formType === 'issue') {
                return `
ISSUE REPORT SUBMISSION
======================

Submitted: ${timestamp}
Name: ${data.name}
Contact Method: ${data['contact-method'] || 'N/A'}
Contact Info: ${data.contact || 'N/A'}

BOOKING INFORMATION:
- Booking Details: ${data['booking-details'] || 'None provided'}
- Booking Date: ${data['booking-date'] || 'N/A'}
- Booking Time: ${data['booking-time'] || 'N/A'}
- Walk-in Time: ${data['walkin-time'] || 'N/A'}
- Walk-out Time: ${data['walkout-time'] || 'N/A'}

ISSUE DESCRIPTION:
${data['issue-description'] || 'No description provided'}

---
This issue report was submitted through the website contact form.
                `.trim();
            } else {
                return `
ENQUIRY SUBMISSION
==================

Submitted: ${timestamp}
Name: ${data.name}
Contact Number: ${data['contact-number'] || 'N/A'}

BOOKING REQUEST:
- Preferred Date: ${data['booking-date'] || 'N/A'}
- Preferred Time: ${data['booking-time'] || 'N/A'}
- Number of People: ${data['people-count'] || 'N/A'}

ENQUIRY DETAILS:
${data['enquiry-description'] || 'No details provided'}

---
This enquiry was submitted through the website contact form.
                `.trim();
            }
        }

        // Success Popup Functions
        function showSuccessPopup(formType) {
            const overlay = document.getElementById('popup-overlay');
            const popup = document.getElementById('success-popup');
            const title = document.getElementById('popup-title');
            const message = document.getElementById('popup-message');

            if (formType === 'issue') {
                title.textContent = 'âœ… Issue Reported Successfully!';
                message.innerHTML = `Your issue has been reported and emailed to <strong>${CONFIG.email.adminEmail}</strong>.<br>We will investigate and get back to you soon.`;
            } else {
                title.textContent = 'âœ… Enquiry Submitted Successfully!';
                message.innerHTML = `Your enquiry has been emailed to <strong>${CONFIG.email.adminEmail}</strong>.<br>We will contact you shortly to confirm your booking.`;
            }

            // Show popup with accessibility
            overlay.style.display = 'block';
            overlay.setAttribute('aria-hidden', 'false');
            popup.style.display = 'block';
            popup.setAttribute('aria-hidden', 'false');
            
            // Focus management
            const closeButton = document.getElementById('popup-close');
            if (closeButton) {
                closeButton.focus();
            }
            
            // Announce success
            const announcement = title.textContent + ' ' + message.textContent.replace(/<[^>]*>/g, '');
            announceToScreenReader(announcement);
            
            // Trap focus in popup
            trapFocusInPopup(popup);
        }

        function closePopup() {
            const overlay = document.getElementById('popup-overlay');
            const popup = document.getElementById('success-popup');
            
            overlay.style.display = 'none';
            overlay.setAttribute('aria-hidden', 'true');
            popup.style.display = 'none';
            popup.setAttribute('aria-hidden', 'true');
            
            // Return focus to submit button
            const activePanel = document.querySelector('[role="tabpanel"]:not([aria-hidden="true"])');
            const submitButton = activePanel?.querySelector('.submit-btn');
            
            if (submitButton) {
                submitButton.focus();
            }
        }

        // Accessibility Functions
        function announceToScreenReader(message) {
            const statusElement = document.getElementById('form-status');
            if (statusElement) {
                statusElement.textContent = message;
                setTimeout(() => {
                    statusElement.textContent = '';
                }, 1000);
            }
        }

        function setupAccessibilityFeatures() {
            // Skip link functionality
            const skipLink = document.querySelector('.skip-link');
            if (skipLink) {
                skipLink.addEventListener('click', function(e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.focus();
                        target.scrollIntoView();
                    }
                });
            }

            // Keyboard navigation for tabs
            setupKeyboardNavigation();

            // Escape key handling
            document.addEventListener('keydown', function(e) {
                if (e.key === 'Escape') {
                    const popup = document.getElementById('success-popup');
                    if (popup.style.display === 'block') {
                        closePopup();
                    }
                }
            });
        }

        function setupKeyboardNavigation() {
            const tabs = document.querySelectorAll('[role="tab"]');
            
            tabs.forEach((tab, index) => {
                tab.addEventListener('keydown', function(e) {
                    let targetTab = null;
                    
                    switch(e.key) {
                        case 'ArrowLeft':
                        case 'ArrowUp':
                            e.preventDefault();
                            targetTab = tabs[index === 0 ? tabs.length - 1 : index - 1];
                            break;
                        case 'ArrowRight':
                        case 'ArrowDown':
                            e.preventDefault();
                            targetTab = tabs[index === tabs.length - 1 ? 0 : index + 1];
                            break;
                        case 'Home':
                            e.preventDefault();
                            targetTab = tabs[0];
                            break;
                        case 'End':
                            e.preventDefault();
                            targetTab = tabs[tabs.length - 1];
                            break;
                    }
                    
                    if (targetTab) {
                        targetTab.focus();
                        targetTab.click();
                    }
                });
            });
        }

        function trapFocusInPopup(popup) {
            const focusableElements = popup.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            const firstElement = focusableElements[0];
            const lastElement = focusableElements[focusableElements.length - 1];

            function handleTabKey(e) {
                if (e.key === 'Tab') {
                    if (e.shiftKey) {
                        if (document.activeElement === firstElement) {
                            e.preventDefault();
                            lastElement.focus();
                        }
                    } else {
                        if (document.activeElement === lastElement) {
                            e.preventDefault();
                            firstElement.focus();
                        }
                    }
                }
            }

            popup.addEventListener('keydown', handleTabKey);
        }
    </script>
</body>
</html>
